#!/bin/bash

declare -A wap_bssid=(
   ['f4:92:bf:70:0d:6e']='UDM'
   ['f4:92:bf:70:0d:6f']='UDM'
   ['74:ac:b9:59:53:ee']='UAP'
   ['74:ac:b9:59:53:ed']='UAP'
)

declare SSID
declare -l BSSID

# Output lines of `wpa_scan results`.
declare -a LINES=()

SSID=$(  iwgetid -r  )
BSSID=$( iwgetid -ra )

# Currently connected access point.
WAP="${wap_bssid[${BSSID:-_}]}"
WAP="${WAP:-${BSSID}}"


function usage {
cat <<EOF
usage: ${BASH_SOURCE[0]##*/} command [option]

command:
   help              show this message and exit
   select            use \`select\` to choose BSSID, roam to it
   rofi              use \`rofi\` to choose BSSID, roam to it
   list              display BSSID options for current SSID
   current           display currently connected WAP
   auto              noninteractively switches to best signal strength

options:
   -f | --force      force a re-scan, even if results are available
   -w | --wait INT   sleep <INT> seconds after scanning before
                     getting \`wpa_cli scan_results\`

If no options are specified, runs with default:
   \$ roam auto --wait 5

EOF
exit "$1"
}


function _sleep {
   local -i duration="$1"

   while (( duration )) ; do
      printf '\rwaiting: %d '  "$duration"
      (( --duration )) ; sleep 1
   done

   printf '\n'
}


function wpa_scan {
   local early_results
   local -i early_count

   # If running several times back-to-back, there's a good chance the old
   # results are still valid. Potentially don't re-scan.
   early_results=$( sudo wpa_cli scan_results )
   early_count=$( grep -c "$SSID" <<< "${early_results}" )

   if (( __force || early_count < 2 )) ; then
      # Don't currently know a better option than just sleeping while waiting
      # for results. Doesn't seem to set any PID/process or something I can
      # `wait` for. 5s seems to be a sufficient default to consistently have
      # results ready.
      sudo wpa_cli scan >/dev/null ; _sleep "$__wait"
   fi

   mapfile -t LINES < <(
      # Not a huge deal if we re-call `scan_results` here, it's very fast.
      sudo wpa_cli scan_results                                |
      awk -v "SSID=$SSID" 'match($0, SSID) {print $1 "\t" $3}' |
      sort -k2
   )
}


function pretty_lines {
   local n line
   for n in "${!LINES[@]}" ; do
      line="${LINES[n]}"

      [[ ${line} =~ ([[:xdigit:]:]+) ]]
      LINES[n]+=$'\t'
      LINES[n]+="${wap_bssid[${BASH_REMATCH[1]}]}"

      if [[ $line == "${BSSID}"* ]] ; then
         LINES[n]+=' <--'
      fi
   done
}

#                                   commands
#-------------------------------------------------------------------------------
function cmd_list {
   wpa_scan
   pretty_lines
   printf '%s\n' "${LINES[@]}"
}


function cmd_select {
   wpa_scan

   local bssid
   select bssid in "${LINES[@]}" ; do
      [[ $bssid ]] && break
   done

   sudo wpa_cli roam "${bssid%%[[:space:]]*}"
}


function cmd_rofi {
   wpa_scan
   pretty_lines

   params=(
      -dmenu
      -sep   '\n'
      -p     "roam"
   )
   rv=$( printf '%s\n' "${LINES[@]}" | rofi "${params[@]}" ) || exit 0
   awk '{print $1}' <<< "$rv" | xargs sudo wpa_cli roam
}


function cmd_auto {
   wpa_scan
   awk '{print $1}' <<< "${LINES[0]}" | xargs sudo wpa_cli roam
}


function cmd_current {
   echo "$WAP"
}


#                               argument parsing
#-------------------------------------------------------------------------------
# Flags
declare -gi __wait=7             # Seconds before `wpa_cli scan_results`
declare -gi __force=0            # Force re-scan, even if results are avilable

# No args -- default to `auto`.
if (( ! $# )) ; then
   cmd_auto ; exit $?
fi

declare -a autocomplete=(
   'help'
   'select'
   'list'
   'rofi'
   'auto'
   'current'
)

declare -a auto_opts=()
declare cmd=''

while (( $# )) ; do
   case "$1" in
      list)    shift ; cmd=cmd_list     ;;
      rofi)    shift ; cmd=cmd_rofi     ;;
      auto)    shift ; cmd=cmd_auto     ;;
      select)  shift ; cmd=cmd_select   ;;
      current) shift ; cmd=cmd_current  ;;

      -h | --help | help)
               usage 0
               ;;

      -f | --force)
               shift ; __force=1
               ;;

      -w | --wait)
               shift ; __wait="$1" ; shift
               if (( __wait < 0 )) ; then
                  printf 'Value for --wait must be >= 0.\n' >&2
                  exit 1
               fi
               ;;

      -*)      printf 'Unexpected option [%s].\n'  "$1" >&2
               usage 1
               ;;

      *)       mapfile -t auto_opts < <(
                  compgen -W "${autocomplete[*]}" -- "$1"
               )

               if (( ${#auto_opts[@]} == 1)) ; then
                  set -- "${auto_opts[0]}"  "${@:2}"
               else
                  printf 'Unexpected command [%s].\n'  "$1" >&2
                  usage 1
               fi
   esac
done

if [[ ! $cmd ]] ; then
   printf 'Requires command.\n'  >&2
   exit 1
fi

$cmd
