#!/bin/bash
set -e

STENO_DIR="${HOME}/hg/steno"
SCRATCH_DIR="${HOME}/Documents/steno"
CURRENT_LESSON=$(<"${STENO_DIR}/.current-lesson")

function steno_print {
   local input="$1"

   local fdir ; fdir=$( cd "$(dirname "$input")" && pwd )
   local fpath="${fdir##*/}/${input##*/}"

   local ctime; ctime=$( stat --printf='%w' "$input" | cut -d' ' -f1 )
   local today; today=$( date +%Y-%m-%d )

   local header="${fpath}|created:${ctime}, today:${today}|\$% of \$="

   tac "$input" \
   | awk '
      BEGIN {
         star = 0;
         line = "";
      }

      { line = "|| "$0" |" }

      /^[[:space:]]*\*[[:space:]]*$/ {
         star++; print line; next;
      }

      star && /[[:alnum:]]/ {
         star--; print line; next;
      }

      { print line "-" }'      \
   | tac                       \
   | enscript                  \
      --header="$header"       \
      --columns=2              \
      --header-font=Courier8   \
      --font=Courier7          \
      --margins=0:0::          \
      --output=-               \
   | lp -o outputorder=reverse
}


function steno_grep {
   local params=( "$@" )
   local dict_dir="$STENO_DIR"/dictionaries

   rg \
      --color=always        \
      "${params[@]}"        \
      "$dict_dir"/CRAH.rtf  \
      "$dict_dir"/mine.json \
   | awk \
      -v DICTS="${dict_dir}/" \
      '{sub(DICTS, "") ; print}'
}


case "$1" in
   '')
      exec nvim                            \
         '+norm Go'                        \
         '+startinsert'                    \
         '+set filetype=steno_translation' \
         -- "${SCRATCH_DIR}/$(date +%Y-%m-%d)"
      ;;

   'print')
      shift ; steno_print "$1"
      ;;

   'rg' | 'grep')
      shift ; steno_grep "$@"
      ;;

   'cd')
      dir="${STENO_DIR}/lesson_notes/lesson_${CURRENT_LESSON}"
      if ! cd "${dir}" 2>/dev/null; then
         { printf "(Cannot \`cd' to\n"
           printf "  '%s'\n"  "${dir}"
           printf 'Perhaps .current-lesson set wrong?)\n'
         } >&2
         exit 1
      fi

      # shellcheck disable=SC2016 #< "variable" in single quotes
      exec /bin/bash --rcfile <( printf '
         . ~/.bashrc ; export PS1="[steno] ${PS1}" ; ls -l
      ')
      ;;

   'edit')
      shift

      declare -a p=(
         +'setf steno_raw'
         +'norm gg'
         # Scroll to top of raw file, so scrollbind doesn't have an offset. If
         # you've previously editted a line half way down, the LHS file will
         # resume editing there, while the RHS file opens at the top. Oops.

         +'vert split | b .steno_translation | vert 1res 23'
         # Need to pipe edit, or scrollbind is unset. See  :help scrollbind.
      )

      exec nvim "${p[@]}" "${1?}" "${1/.txt/.steno_translation}"
      ;;

   ## Had the idea to use archives for a .stenor & .stenot file. Wrap vim
   ## commands to automatially open in a split for editing. Maybe not though.
   #
   #'new')
   #   shift ; name="$1"
   #   touch "${name}".{stenor,stenot}
   #   tar --directory="$(dirname "$1")" -cfz "$name" "${name}".{stenor,stenot}
   #   ;;
esac
