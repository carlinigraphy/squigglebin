#!/usr/bin/env bash
# vim: ft=bash tw=80 foldmethod=marker foldclose=all
#
# Ground-up rewrite of previous `conf`. Think I can make cleaner this time
# around.
#
# shellcheck disable=SC2178 #< gets confused with namerefs.
#-------------------------------------------------------------------------------
set -e

declare -gr DATA_FILE="${XDG_DATA_HOME:-$HOME}/.local/share/twce/conf"/data
declare -gr DATA_DIR="${DATA_FILE%/*}"

mkdir -p "$DATA_DIR"
touch "$DATA_FILE"

# Database represented in bash as an array of 'entry' objects.
# DB := {
#     $nick1 := {path1, path2... pathN},
#     $nick2 := {path1, path2... pathN},
# }
declare -gA DB=()

# Maintain user's order.
declare -ga DB_ORDER=()

# Holds pointer to current entry array.
declare -g  ENTRY
declare -gi _ENTRY_NUM=0


function usage {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: ${BASH_SOURCE[0]##*/} command NICKNAME [param1..paramN]

commands:
   help CMD    prints help text for CMD
   edit ARGS   edit NICKNAME w/ optional args
   set  PATH+  associates PATH(s) with a given NICKNAME
   db          edit conf's db
   clean       \`rm\` all but last 5 database backups
   sort        \`sort\` conf's db
   list        lists all nicknames in db
   cd          \`cd\` to NICKNAME's in a subshell

EOF
exit "$1"
}

#                              database nonsense
#-------------------------------------------------------------------------------
function new_entry {
   local lineno="$1"  nick="$2"

   local entry="_ENTRY_$(( ++_ENTRY_NUM ))"
   declare -gA "$entry"

   local items="_ENTRY_ITEMS_${_ENTRY_NUM}"
   declare -ga "$items"

   local -n entry_r="$entry"
   entry_r['items']="$items"

   # *New* entries must be added to the DB order. Existing entries to be updated
   # must not be added twice.
   if [[ $lineno && $nick ]] ; then
      DB["$nick"]="$entry"
      DB_ORDER+=( "$nick" )
      entry_r['lineno']="$lineno"
   fi

   declare -g ENTRY="$entry"
}


function db_store {
   local -i n
   local target
   local base="${DATA_DIR}"/backup

   ## Hmm, maybe turn this into a slightly more "clever" one-liner? Can't use
   ## the --backup flag, as it's not included w/ the BSD `mv` or `install`
   ## commands.
   #while ! mv -n "$DATA_FILE" "${base}.$(( ++n ))" ; do :; done

   while
      target="${base}.$(( ++n ))" &&
      [[ -f "$target" ]]
   do :; done

   mv "$DATA_FILE" "$target"

   { for nick in "${DB_ORDER[@]}" ; do
      local -n entry_r="${DB[$nick]}"
      local -n items_r="${entry_r['items']}"
      printf '%s\n'     "$nick"
      printf '   %s\n'  "${items_r[@]}"
      printf '\n'
   done } > "$DATA_FILE"
}


function db_load {
   local -i lineno=0

   while IFS=$'\n' read -r line ; do
      (( ++lineno ))

      is_whitespace "$line" && continue
      is_comment    "$line" && continue

      if is_nick "$line" ; then
         new_entry "$lineno" "${BASH_REMATCH[1]}"
         continue
      fi

      if ! local -n entry_r="$ENTRY" 2>/dev/null ; then
         printf '(Unexpected indent on line %d.)\n'  "$lineno" >&2
         exit 1
      fi

      local -n items_r="${entry_r['items']}"
      items_r+=( "${line##* }" )
   done < "$DATA_FILE"
}

function is_whitespace { [[ $1 =~ ^[[:space:]]*$   ]] ;}
function is_comment    { [[ $1 =~ ^[[:space:]]*#   ]] ;}
function is_nick       { [[ $1 =~ ^([^[:space:]]+) ]] ;}


function db_validate {
   local -i errors=0
   local -a unfound=()

   local nick
   for nick in "${!DB[@]}" ; do
      local -n entry_r="${DB[$nick]}"
      local -n items_r="${entry_r['items']}"

      local -a files
      mapfile -t files < <(
         xargs -I{} bash -c "printf '%s\n' {}" <<< "${items_r[@]}"
      )

      if [[ ! $files ]]  ; then
         printf  'Nickname [%s] has no associated paths.'  "${nick}"
         (( ++errors ))
      fi

      local f
      for f in "${files[@]}" ; do
         if [[ ! -f ${f} ]] &&
            [[ ! -r ${f} ]] &&
            [[ ! -L ${f} ]]
         then
            unfound+=( "$f" )
            (( ++errors ))
         fi
      done
   done

   if (( ${#unfound[@]} )) ; then
      { printf '(Does exist, or is not file:\n'
         printf "  '%s'\n"  "${unfound[@]}"
         printf ')\n'
      } >&2
   fi

   if (( errors )) ; then
      exit 1
   fi
}

#                              command :: list
#----------------------------------------------------------------------------{{{
function usage_list {
   cat <<EOF
usage: conf list

description:
   Lists all nicknames in db. Arguments are discarded.

options:
   -h | --help    show this message and exit

EOF
exit 0
}


function cmd_list {
   if [[ $1 =~ (-h|--help) ]] ; then
      usage_list
   fi

   while IFS=$'\n' read -r line ; do
      if is_comment "$line" ; then
         continue
      fi

      if is_nick "$line" ; then
         echo "${BASH_REMATCH[1]}"
      fi
   done < "$DATA_FILE"
}
#}}}

#                              command :: cd
#----------------------------------------------------------------------------{{{
function usage_cd {
   cat <<EOF
usage: conf cd NICKNAME

description:
   Change directory to NICK's in a subshell. Arguments are discarded.

options:
   -h | --help    show this message and exit

EOF
exit 0
}


function cmd_cd {
   if (( ! $# )) ; then
      printf "(Command \`cd' expects a nickname argument.)\n" >&2
      exit 1
   elif [[ $1 =~ (-h|--help) ]] ; then
      usage_cd 0
   fi

   local nick="$1"

   db_load
   local entry="${DB[$nick]}"
   if [[ ! $entry ]] ; then
      printf "(Nickname \`%s' does not exist.)\n"  "$nick"
      exit 1
   fi

   local -n entry_r="$entry"
   local -n items_r="${entry_r['items']}"

   local -a files
   mapfile -t files < <(
      xargs -I{} bash -c "printf '%s\n' {}" <<< "${items_r[@]}"
   )

   local dst="${files[0]%/*}"
   if ! cd "${dst}" 2>/dev/null; then
      { printf "(Cannot \`cd' to\n"
        printf "  '%s'\n"  "${dst}"
        printf ')\n'
      } >&2
      exit 1
   fi

   printf '(in subshell, SHLVL is %d. <C-D> to exit.)\n'  "$(( SHLVL - 1))"

   # There's a little bit of tomfoolery here. I want to overwrite PS1, but it's
   # set *after* any exported variables when .bashrc is read.
   #
   # shellcheck disable=SC2016 #< intentional variable in single quotes.
   exec /bin/bash --rcfile <( printf '
      . ~/.bashrc ; export PS1="[conf] ${PS1}"
   ')
}
#}}}

#                              command :: set
#----------------------------------------------------------------------------{{{
function usage_set {
cat <<EOF
usage: conf set NICK path1 [ ,pathN]

description:
   Associates path(s) with a given nickname.

options:
   -h | --help    show this message and exit

EOF
exit "$1"
}


function cmd_set {
   if (( ! $# )) ; then
      printf "(Command \`set' expects a nickname argument.)\n" >&2
      exit 1
   elif [[ $1 =~ (-h|--help) ]] ; then
      usage_set 0
   fi

   local nick="$1" ; shift

   if (( ! $# )) ; then
      { printf "(Command \`set' expecting path(s) to associate with "
        printf '[%s].)\n' "${nick}"
      } >&2
      usage_set 1
   fi

   db_load ; new_entry
   local entry="$ENTRY"
   local -n entry_r="$entry"
   local -n items_r="${entry_r['items']}"
   items_r=( "$@" )

   if [[ ! ${DB[$nick]} ]] ; then
      DB_ORDER+=( "$nick" )
   fi

   DB["$nick"]="$entry"
   db_validate
   db_store
}
#}}}

#                              command :: edit
#----------------------------------------------------------------------------{{{
function usage_edit {
   local outfile
   case "$1" in
      0)  outfile=/dev/stdout ;;
      '') outfile=/dev/stdout ;;
      *)  outfile=/dev/stderr ;;
   esac

   cat <<EOF >"$outfile"
usage: conf edit [arg1, ...argN] nick

description:
   open NICK in nvim w/ optional args.

options:
   -h | --help    show this message and exit

EOF
exit "$1"
}


function cmd_edit {
   if [[ $1 =~ (-h|--help) ]] ; then
      usage_edit 0
   fi

   local nick="$1" ; shift
   if [[ ! $nick ]] ; then
      printf "(Command \`edit' expects a nickname argument.)\n" >&2
      usage_edit 1
   fi

   db_load
   local entry="${DB[$nick]}"
   if [[ ! $entry ]] ; then
      printf "(Nickname \`%s' does not exist.)\n"  "$nick"
      exit 1
   fi

   local -n entry_r="$entry"
   local -n items_r="${entry_r['items']}"
   local -a files
   mapfile -t files < <(
      xargs -I{} bash -c "printf '%s\n' {}" <<< "${items_r[@]}"
   )

   cd "${files[0]%/*}"
   exec nvim  "${@}"  "${files[@]}"
}
#}}}

#                              command :: sort
#----------------------------------------------------------------------------{{{
function usage_sort {
   cat <<EOF
usage: conf sort

description:
   Sorts conf's own database alphabetically in-place by nickname.

options:
   -h | --help    show this message and exit

EOF
exit 0
}


function cmd_sort {
   if [[ $1 =~ (-h|--help) ]] ; then
      usage_sort
   fi

   db_load
   mapfile -t DB_ORDER < <(
      printf '%s\n' "${DB_ORDER[@]}" | sort
   )
   db_store
}
#}}}

#                              command :: clean
#----------------------------------------------------------------------------{{{
function usage_clean {
   cat <<EOF
usage: conf clean [\`rm\` args]

description:
   Removes all but the last 5 database backups.

options:
   -h | --help    show this message and exit

rm args:
   Defaults to \`-i\` (interactive removal). Can overwrite by passing additional
   args.

EOF
exit 0
}


function cmd_clean {
   if [[ $1 =~ (-h|--help) ]] ; then
      usage_clean
   fi

   # Default to 'interactive'.
   local -a rm=( -i )
   if (( $# )) ; then
      rm=( "$@" )
   fi

   local -a stat=(
      --printf='%Y %n\n'
      "${DATA_DIR}"/backup.~*
   )

   stat "${stat[@]}" 2>/dev/null \
   | sort                        \
   | cut -d' ' -f2               \
   | head --lines=-5             \
   | xargs rm "${rm[@]}"
}
#}}}

#                              command :: db
#----------------------------------------------------------------------------{{{
function usage_db {
   cat <<EOF
usage: conf db [arg1..argN]

description:
   Edits conf's database w/ arguments.

options:
   -h | --help    show this message and exit

EOF
exit 0
}


function cmd_db {
   if [[ $1 =~ (-h|--help) ]] ; then
      usage_db
   fi

   exec nvim  "$@"  "${DATA_FILE}"
}
#}}}

#                              command :: help
#----------------------------------------------------------------------------{{{
function cmd_help {
   local -A valid=()
   for opt in "${!opts[@]}" ; do
      valid["$opt"]=1
   done

   # Ignore `conf help help`, `conf help --help`
   unset 'valid[help]' 'valid[--help]' 'valid[.]' 'valid[,]'

   if [[ ! ${valid[${1:-_}]} ]] ; then
      { printf "(Command \`help' expecting exactly one of...\n"
         printf ' %s\n'  "${!valid[@]}"
         printf ") ...unless you meant \`conf --help\`?\n\n"
      } >&2
      exit 1
   fi

   usage_"$1" 0
}
#}}}

#                                    engage
#-------------------------------------------------------------------------------
if (( ! $# )) ; then
   usage 1
fi

declare -ga  possible=()
declare -grA opts=(
   ['--help']=1
   ['help']=1
   ['edit']=1
   ['set']=1
   ['cd']=1
   ['sort']=1
   ['clean']=1
   ['list']=1
   ['fmt']=1
   ['db']=1
   ['.']=1
   [',']=1
)

declare cmd="$1"

# Only necessary if $1 is not an exact match for an option. Uses `compgen` to
# expand to a command. E.g., `conf c` -> `conf clean`.
if [[ ! ${opts[$cmd]} ]] ; then
   mapfile -t possible < <(
      compgen -W "${!opts[*]}" -- "$1"
   )

   if (( ${#possible[@]} > 1 )) ; then
      { printf "(Ambiguous command \`%s' can be...\n"  "$1"
        printf ' %s\n'  "${possible[@]}"
        printf ')\n'
      } >&2
      exit 1
   fi

   # shellcheck disable=SC2128
   cmd="${possible}"
fi

case "$cmd" in
   -h | --help)
            usage 0              ;;
   'help')  cmd_help   "${@:2}"  ;;
   'set')   cmd_set    "${@:2}"  ;;
   'cd')    cmd_cd     "${@:2}"  ;;
   'sort')  cmd_sort   "${@:2}"  ;;
   'clean') cmd_clean  "${@:2}"  ;;
   'db')    cmd_db     "${@:2}"  ;;
   'list')  cmd_list   "${@:2}"  ;;
   'edit')  cmd_edit   "${@:2}"  ;;

   # 'Shortcuts'. Faster to type.
   '.')     cmd_edit   "${@:2}"  ;;
   ',')     cmd_cd     "${@:2}"  ;;

   # Try defaulting to `edit' mode, maybe it's a valid $nick.
   *)       db_load
            if [[ ! ${DB[$1]} ]] ; then
               usage 1
            else
               cmd_edit "$@"
            fi
            ;;
esac
